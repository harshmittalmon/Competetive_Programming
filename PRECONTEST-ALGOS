// calculate primes or with modif used to store the count of numbers(make array of int in that case)
// 1 - Sieve
void Sieve(int n)
{
    // Create a boolean array "prime[0..n]" and initialize
    // all entries it as true. A value in prime[i] will
    // finally be false if i is Not a prime, else true.
    bool prime[n + 1];
    memset(prime, true, sizeof(prime));
  
    for (int p = 2; p * p <= n; p++) {
        // If prime[p] is not changed, then it is a prime
        if (prime[p] == true) {
            // Update all multiples of p greater than or
            // equal to the square of it numbers which are
            // multiple of p and are less than p^2 are
            // already been marked.
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }
  
    // Print all prime numbers
    for (int p = 2; p <= n; p++)
        if (prime[p])
            cout << p << " ";
}


// max maxSubArraySum or count of max subarr or which subarr
//   2 - kadane's algo
int maxSubArraySum(vector<int> arr, int size)
{
    int gen_max = INT_MIN, curr_max = 0;
 
    for (int i = 0; i < size; i++) {
        curr_max = curr_max + a[i];
        if (gen_max < curr_max)
            gen_max = curr_max;
 
        if (curr_max < 0)
            curr_max = 0;
    }
    return gen_max;
}

//to check if the number is major in an array
// 3 -  MOORE'S VOTING 
int findMajority(vector<int> arr, int n)
{
    int i, candidate = -1, votes = 0;
    // Finding majority candidate
    for (i = 0; i < n; i++) {
        if (votes == 0) {
            candidate = arr[i];
            votes = 1;
        }
        else {
            if (arr[i] == candidate)
                votes++;
            else
                votes--;
        }
    }
    int count = 0;
    // Checking if majority candidate occurs more than n/2
    // times
    for (i = 0; i < n; i++) {
        if (arr[i] == candidate)
            count++;
    }
 
    if (count > n / 2)
        return candidate;
    return -1;
}




// 4 - FAST EXPNENTIATION
long long powerab(long long a ,long long b , int mod) {
    long long ans = 1;
    while(b>0){
        if(b%2==1){
            ans = (a* ans)%mod;
            b--;
        }
        a=(a*a)%mod;
        b/=2;
    }
    return ans;
}


