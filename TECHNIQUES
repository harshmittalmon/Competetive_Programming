TECHNIQUES 

1. Count the number of elements with value 'x' in a sorted array 

int arr[5] = {1,3,4,4,4};
auto k = lower_bound(arr,arr+5,4)-arr;
auto k2 = upper_bound(arr, arr+ 5, 4)-arr;
cout << ( k2 ) - ( k ) << endl; 
or 
auto r = equal_range(array, array+n, x);
cout << r.second-r.first << "\n";




2. PBDS library 
headers 
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
( defining indexed set ) 
typedef tree<int,null_type,less<int>,rb_tree_tag,
tree_order_statistics_node_update> indexed_set;
indexed_set s;
s.insert(2);
s.insert(3);
s.insert(7);
s.insert(9);
cout << s.order_of_key(3);// 1 
cout << *s.find_by_order(0);// 2


3. Custom Comparator
struct Stud {

    string  name ; 
    int roll;
    float marks; 

    bool operator < (const Stud & other) const {
        if (marks != other.marks) return marks > other.marks; 
        if (roll != other.roll) return roll < other.roll;    
        return name < other.name;  
    }
    
};

int main(){ 
    map<Stud,int> mp;
    mp[{"harsh",2,30.0}] = 1; 
    mp[{"aurabh",2,60.0}] = 1; 
    for( auto i : mp ){
        cout << i.first.name <<endl;
    }
}


or 
struct Edge {
	int a, b;
	int width;
};

bool operator<(const Edge &x, const Edge &y) { return x.width < y.width; }

  // const Stud& other → means the parameter other won’t be modified inside the function.
  // ... const at the end → means this object (on the left side of <) won’t be modified either.

or 


	
struct Edge {
	int a, b;
	int width;
};

int main() {
	constexpr int edge_num = 4;

	vector<Edge> edges(edge_num);
	for (Edge &e : edges) { cin >> e.a >> e.b >> e.width; }
	sort(edges.begin(), edges.end(),
	     [](const Edge &x, const Edge &y) { return x.width < y.width; });

	for (const Edge &e : edges) { printf("(%i, %i): %i\n", e.a, e.b, e.width); }
}







